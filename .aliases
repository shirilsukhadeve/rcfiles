# set cfg dir alias
if [[ -d $HOME/.cfg ]]; then
    #echo -e "setting alias to $HOME/.cfg"
    alias cdcfg='cd $HOME/.cfg'
    export PATH=$PATH:$HOME/.cfg/usefulscripts
fi

#general
alias publicip='curl https://ipinfo.io/ip'
alias ls='ls --color'
alias vim='nvim'


#tmux
alias tl='tmux -2 list-sessions'
alias ta='tmux -2 attach'
alias tn='tmux -2 new-session -s'
alias tk='tmux kill-session -t'
alias tka='tmux kill-server'


#git
alias merge='git mergetool --tool=vimdiff'
alias fetch='git fetch --progress -v'
alias delete='git branch -D'
alias reb='git pull --rebase'
alias br='git branch -vv'
alias ch='git checkout'
alias gs='git stash'


#kubernetes
alias k='kubectl'
alias cleankconfig='rm -rf ~/.kube/http-cache;rm -rf ~/.kube/cache;rm -rf ~/.kube/cache/oidc-login'

# build cscope functions
mkcd()
{
  test -e "$1" || mkdir -p "$1"
  cd "$1"
}

# This will create a cscope folder database in the WorkRepos dir
# Run in project root folder
cscope_build()
{
    CURRENT_DIR="$(pwd)"
    echo "Current Working dir: $CURRENT_DIR"

    # Find the Git root directory
    if ! PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null); then
        echo "Error: Not inside a Git repository."
        return 1
    fi
    echo "Found project root in: $PROJECT_ROOT"

    cd "$PROJECT_ROOT" || return 1

    REPO_NAME="$(basename "$PROJECT_ROOT")"
    BRANCH_NAME="$(git symbolic-ref --short HEAD 2>/dev/null || echo 'detached')"
    REMOTE_BRANCH="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo 'no-remote')"
    CURRENT_COMMIT_HASH="$(git rev-parse HEAD)"
    echo "Repository: $REPO_NAME, Branch: $BRANCH_NAME, Remote: $REMOTE_BRANCH, Commit: $CURRENT_COMMIT_HASH"

    DATABASE_DIR=~/WorkRepos/cscope_databases/$REPO_NAME/$BRANCH_NAME
    LOCK_FILE="${DATABASE_DIR}/cscope.lock"
    MANIFEST_FILE="${DATABASE_DIR}/manifest"

    echo "Cscope database dir: $DATABASE_DIR"
    mkcd "${DATABASE_DIR}" || return 1

    # Locking mechanism
    if [ -e "$LOCK_FILE" ]; then
        echo "Error: Another cscope build is in progress (lock file exists at $LOCK_FILE)."
        echo "If this is a stale lock, you may remove it manually."
        cd "$CURRENT_DIR" || return 1
        return 1
    fi

    touch "$LOCK_FILE"

    BUILD_NEEDED=1

    if [ -e "$MANIFEST_FILE" ]; then
        echo "Manifest found. Checking for changes..."
        STORED_COMMIT_HASH=$(grep "^Commit:" "$MANIFEST_FILE" | awk '{print $2}')

        if [ "$STORED_COMMIT_HASH" = "$CURRENT_COMMIT_HASH" ] && [ -e cscope.out ] && [ -e ctags.out ] && [ -e source_code.files ]; then
            echo "No changes detected. Skipping cscope and ctags rebuild."
            BUILD_NEEDED=0
        else
            echo "Commit hash changed. Rebuilding cscope and ctags."
        fi
    else
        echo "Manifest not found. Rebuilding cscope and ctags."
    fi

    if [ "$BUILD_NEEDED" -eq 1 ]; then
        rm -f source_code.files cscope.out ctags.out 2>/dev/null

        echo "Indexing source files..."
        find $PROJECT_ROOT  \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cpp' \
                               -o -name '*.cxx' -o -name '*.idl' -o -name '*.icpp' -o -name '*.y' \
                               -o -name '*.l' -o -name '*.cc' -o -name '*.py' \) > source_code.files

        FILE_COUNT=$(wc -l < source_code.files)

        echo "Building cscope database..."
        cscope -b -i source_code.files -f cscope.out
        echo "Building ctags database..."
        ctags -L source_code.files -f ctags.out

        TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
        cat > "$MANIFEST_FILE" <<EOF
Repository: $REPO_NAME
Branch: $BRANCH_NAME
Remote: $REMOTE_BRANCH
Commit: $CURRENT_COMMIT_HASH
Build Time: $TIMESTAMP
Files Indexed: $FILE_COUNT
EOF

        echo "Manifest updated."
    fi

    export CSCOPE_DB="${DATABASE_DIR}/cscope.out"
    export CTAGS_DB="${DATABASE_DIR}/ctags.out"

    rm -f "$LOCK_FILE"
    cd $CURRENT_DIR || return 1
    echo "cscope_build completed successfully."
}
